{
  "hash": "e6f0573ef4643fe14acfc824f1c6919a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Benchmarking rolling functions in R\ndescription: I set out to benchmark the speed of rolling functions from R packages\ncategories: \n    - r\n    - rolling\n    - stats\ndate: 2024-10-03\nimage: \"pretty-r.png\"\nimage-alt: Two cute balls decorating the R logo.\ndraft: false\n---\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](pretty-r.png){fig-align='center' fig-alt='A fuzzy monster in a beret and scarf, critiquing their own column graph on a canvas in front of them while other assistant monsters (also in berets) carry over boxes full of elements that can be used to customize a graph (like themes and geometric shapes). In the background is a wall with framed data visualizations. Stylized text reads \"ggplot2: build a data masterpiece.\"' width=75%}\n:::\n:::\n\n\n\n\n::: {.gray-italic .center-text}\nArt by [Allison Horst](https://allisonhorst.com/)\n:::\n\n---\n\n\nI'll write a bit about the benchmarks here.\n\nCan run on a normal vector (precludes `polars`).\n\nHere are the packages under consideration (if you have additions, please open an issue on Github):\n\n-   data.table\n-   zoo\n-   RcppRoll\n-   runner\n-   slider\n-   RollingWindow\n-   roll\n-   runstats\n-   polars\n\nWe are considering the following computations\n\n-   Mean\n-   Median\n-   Min\n-   Max\n-   Sum\n-   Product\n-   SD\n-   MAD\n-   Correlation\n-   Covariance\n-   Skew\n-   Custom functions\n\nWe also keep track of various features:\n\n- Alignment\n- NA handling\n- Weight\n\nInstall `data.table` form the `rollmedian` branch:\n\n\n\n\n\n\n\n\n\n\n-   `devtools::install_github(\"Rdatatable/data.table\", ref = \"rollmedian\")`\n\nInstall `roll` from Github:\n\n-   `devtools::install_github(\"jasonjfoster/roll\")`\n\nInstall `RollingWindow` from Github:\n\n-   `devtools::install_github(\"andrewuhl/RollingWindow\")`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(microbenchmark)\n\nlibrary(slider)\nlibrary(runner)\nlibrary(zoo)\nlibrary(RollingWindow)\nlibrary(RcppRoll)\nlibrary(roll)\nlibrary(data.table)\nlibrary(runstats)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(x = rnorm(1000000))\nn <- 51\nn_times <- 10\nn_half <- floor(n/2)\n```\n:::\n\n\n\n\n## Mean\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollmean\" = data.table::frollmean(df$x, n),\n  \"roll::roll_mean\" = roll::roll_mean(df$x, width = n),\n  \"RollingWindow::RollingMean\" = RollingWindow::RollingMean(df$x, n),\n  \"runstats::RunningMean\" = runstats::RunningMean(df$x, W = n),\n  \"slider::slide_mean\" = slider::slide_mean(df$x, before = n_half, after = n_half),\n  \"RcppRoll::roll_mean\" = RcppRoll::roll_mean(df$x, n = n, fill = NA),\n  \"zoo::rollmean\" = zoo::rollmean(df$x, k = n, fill = NA),\n  \"runner::mean_run\" = runner::mean_run(df$x, k = n, na_pad = TRUE),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                       expr         min          lq        mean      median\n      data.table::frollmean    2.528392    2.575577    6.409287    2.823944\n            roll::roll_mean   11.249723   11.923514   15.633693   13.978278\n RollingWindow::RollingMean   16.104892   17.353718   22.353997   21.186912\n      runstats::RunningMean   14.839448   16.012179   27.653775   19.636449\n         slider::slide_mean   73.741872   74.134439   76.586143   74.859557\n        RcppRoll::roll_mean  124.848519  125.173977  131.904014  125.323508\n              zoo::rollmean  258.371663  325.731206  367.712097  363.513641\n           runner::mean_run 1189.143254 1208.572897 1342.568931 1349.811091\n          uq        max neval\n    9.788604   19.20219    10\n   19.228761   24.24973    10\n   22.934465   39.18662    10\n   21.156570  106.35653    10\n   75.554435   87.88286    10\n  127.265534  185.96713    10\n  406.102017  491.26451    10\n 1459.592818 1533.96127    10\n```\n\n\n:::\n:::\n\n\n\n\n## Median\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollmedian\" = data.table::frollmedian(df$x, n),\n  \"RollingWindow::RollingMedian\" = RollingWindow::RollingMedian(df$x, n),\n  \"zoo::rollmedian\" = zoo::rollmedian(df$x, k = n, fill = NA),\n  \"roll::roll_median\" = roll::roll_median(df$x, width = n),\n  \"RcppRoll::roll_median\" = RcppRoll::roll_median(df$x, n = n, fill = NA),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                         expr        min         lq       mean     median\n      data.table::frollmedian   67.63338   70.79997   72.63963   72.23658\n RollingWindow::RollingMedian   55.46251   56.34510   60.34565   57.67917\n              zoo::rollmedian  287.78461  353.23420  363.93025  364.49829\n            roll::roll_median  481.88655  487.59467  492.29941  489.00424\n        RcppRoll::roll_median 1390.57466 1394.72265 1399.23186 1395.54720\n         uq        max neval\n   73.49281   80.82044    10\n   66.77382   67.41929    10\n  377.75150  429.53638    10\n  495.05209  512.52022    10\n 1403.80476 1418.83105    10\n```\n\n\n:::\n:::\n\n\n\n\n## Min\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollmin\" = data.table::frollmin(df$x, n),\n  \"roll::roll_min\" = roll::roll_min(df$x, width = n),\n  \"RollingWindow::RollingMin\" = RollingWindow::RollingMin(df$x, n),\n  \"RcppRoll::roll_min\" = RcppRoll::roll_min(df$x, n = n, fill = NA),\n  \"runner::min_run\" = runner::min_run(df$x, k = n, na_pad = TRUE),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                      expr        min         lq       mean      median\n      data.table::frollmin   4.845729   5.199644   5.398049    5.338382\n            roll::roll_min  21.493150  22.052008  22.471110   22.277611\n RollingWindow::RollingMin  43.622865  43.770571  52.614803   44.285968\n        RcppRoll::roll_min 341.501616 341.736272 343.869839  342.315587\n           runner::min_run 763.922595 785.407571 986.200854 1021.810808\n          uq         max neval\n    5.450568    6.656056    10\n   22.362016   25.204924    10\n   55.645740  100.317851    10\n  343.806943  356.130640    10\n 1136.936654 1277.429589    10\n```\n\n\n:::\n:::\n\n\n\n\n## Max\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollmax\" = data.table::frollmax(df$x, n),\n  \"roll::roll_max\" = roll::roll_max(df$x, width = n),\n  \"RollingWindow::RollingMax\" = RollingWindow::RollingMax(df$x, n),\n  \"RcppRoll::roll_max\" = RcppRoll::roll_max(df$x, n = n, fill = NA),\n  \"runner::max_run\" = runner::max_run(df$x, k = n, na_pad = TRUE),\n  \"zoo::rollmax\" = zoo::rollmax(df$x, k = n, fill = NA),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                      expr         min          lq        mean      median\n      data.table::frollmax    5.088317    5.360759    7.238134    5.543899\n            roll::roll_max   21.927607   22.208017   24.618317   22.897165\n RollingWindow::RollingMax   42.709967   43.708928   47.450042   43.834974\n        RcppRoll::roll_max  340.493071  341.861354  344.178960  343.301036\n           runner::max_run  761.009794  771.572608  921.591040  872.108225\n              zoo::rollmax 1105.288335 1146.510895 1180.192603 1159.619289\n          uq        max neval\n    9.557734   12.76079    10\n   27.404292   29.57034    10\n   49.448732   62.44726    10\n  346.667787  349.17161    10\n 1046.810618 1188.65542    10\n 1172.851812 1323.71699    10\n```\n\n\n:::\n:::\n\n\n\n\n## Sum\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n    \"data.table::frollsum, fast\" = data.table::frollsum(df$x, n, algo = \"fast\"),\n    \"roll::roll_sum\" = roll::roll_sum(df$x, width = n),\n    \"RollingWindow::RollingSum\" = RollingWindow::RollingSum(df$x, n),\n    \"slider::slide_sum\" = slider::slide_sum(df$x, before = n_half, after = n_half),\n    \"data.table::frollsum, exact\" = data.table::frollsum(df$x, n, algo = \"exact\"),\n    \"RcppRoll::roll_sum\" = RcppRoll::roll_sum(df$x, n = n, fill = NA),\n    \"zoo::rollsum\" = zoo::rollsum(df$x, n, fill = NA),\n    \"runner::sum_run\" = runner::sum_run(df$x, k = n, na_pad = TRUE),\n    times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                        expr         min          lq        mean      median\n  data.table::frollsum, fast    2.468353    2.677565    4.478684    2.881925\n              roll::roll_sum    5.968941    6.208679    9.064714    6.967456\n   RollingWindow::RollingSum   17.344807   18.079892   28.505993   22.773872\n           slider::slide_sum   73.169581   74.198004   74.981613   74.822772\n data.table::frollsum, exact   36.078660   36.771375   38.728564   36.971688\n          RcppRoll::roll_sum  124.487880  124.967297  137.863318  125.799511\n                zoo::rollsum  262.796820  321.825352  343.230812  334.105080\n             runner::sum_run 1175.274787 1186.584031 1303.626565 1202.849454\n          uq        max neval\n    5.539535   11.08081    10\n    9.795142   18.60304    10\n   27.648642   82.67978    10\n   75.584955   78.11596    10\n   37.923790   53.54899    10\n  128.367919  241.31714    10\n  371.039815  440.70912    10\n 1434.765679 1553.45422    10\n```\n\n\n:::\n:::\n\n\n\n\n## SD\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"roll::roll_sd\" = roll::roll_sd(df$x, width = n),\n  \"RollingWindow::RollingStd\" = RollingWindow::RollingStd(df$x, n),\n  \"runstats::RunningSd\" = runstats::RunningSd(df$x, W = n),\n  \"RcppRoll::roll_sd\" = RcppRoll::roll_sd(df$x, n = n, fill = NA),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                      expr        min         lq       mean     median\n             roll::roll_sd   53.53818   54.55695   55.29623   55.05981\n RollingWindow::RollingStd   29.67353   29.85540   38.70341   33.14228\n       runstats::RunningSd   52.09679   52.99587   84.10161   79.75626\n         RcppRoll::roll_sd 1075.56594 1085.75599 1112.54256 1100.41033\n         uq        max neval\n   55.90207   57.53775    10\n   36.90833   77.85308    10\n   91.44206  151.42464    10\n 1132.83261 1194.03892    10\n```\n\n\n:::\n:::\n\n\n\n\n## Custom functions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollapply\" = data.table::frollapply(df$x, n, sum),\n  \"zoo::rollapply\" = zoo::rollapply(df$x, n, sum),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: seconds\n                   expr       min        lq      mean    median        uq\n data.table::frollapply  3.640066  3.721544  3.770476  3.737924  3.871212\n         zoo::rollapply 10.515981 10.554274 10.925195 10.913021 11.107258\n       max neval\n  3.921615    10\n 11.469549    10\n```\n\n\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}