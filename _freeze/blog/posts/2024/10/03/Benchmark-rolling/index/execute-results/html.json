{
  "hash": "8741dc4692fa189376a98278a434df67",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Benchmarking rolling window functions in R\ndescription: Rolling, running or sliding window functions; there are many names, for these powerful tools. Here I benchmark the speed of rolling functions from a range of R packages.\ncategories: \n    - r\n    - time series\n    - stats\ndate: 2024-10-03\ndate-modified: 2024-10-04\nimage: \"pretty-r.png\"\nimage-alt: Two fuzzy monsters decorating the R logo.\ndraft: false\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](pretty-r.png){fig-align='center' fig-alt='Two fuzzy monsters decorating the R logo.' width=75%}\n:::\n:::\n\n\n\n\n::: {.gray-italic .center-text}\nArt by [Allison Horst](https://allisonhorst.com/)\n:::\n\n------------------------------------------------------------------------\n\nRolling functions are widely used in science, especially when working with smoothing and/or time series. They also form the basis of feature extraction from time series, used for many classification methods in machine learning. Simply put, they take a window of `k` values at a time and perform some mathematical operation on them. When I started out using rolling functions for smoothing animal movement paths, I used `{zoo}`'s `rollmean()`. With large data sets, this step always took a long time. Only much later did I realise that many packages exist that tackle this issue. I've used a number of them in my work, but now I decided to put them to the test! Which package is fastest?! Of course it's a little more nuanced than that: There are many different types of rolling functions, and extra functionality that one might need. Although we try to narrow the tests to avoid them getting out of hand, it does mean it will be a long post with lots of numbers, but hopefully it will prove useful for both you and me. :-)\n\n## Which functions?\nRolling functions can in principle be used with any function that produces a single value from a vector (see custom functions below). But some are common and have their own functions with optimised algorithms have been developed for them. We are considering the following computations:\n\n-   Mean\n-   Median\n-   Min\n-   Max\n-   Sum\n-   Product (**TODO**)\n-   SD\n-   MAD (**TODO**)\n-   Correlation (**TODO**)\n-   Covariance (**TODO**)\n-   Skew (**TODO**)\n-   Custom functions\n\n## Which features?\nThere are a lot of features available in many of the packages. It is outside the scope of this benchmark to test them all, as we will just test with standard settings, but do check out some of the packages that have more advanced features. For now, the two most important features are:\n\n**NA handling**. The standard should be to have a constant window width, and if `NA`s are present to (1) exclude the `NA`s and compute the metric from the remaining values, or (2) return `NA`. This distinction is often reflected in a parameter called `complete` or something similar. Although are more ways to deal with this, e.g. adaptive window widths.\n\n**Alignment**. Alignment is one of the most important features of a rolling function. There are (at least) three ways they can be aligned:\n\n-   **Left**: [*------], will cause the returned vector to have NA values at the right end.\n-   **Center**: [---*---], will cause the returned vector to have NA values at either end.\n-   **Right**: [------*], will cause the returned vector to have NA values at the left end.\n\n## Which packages?\nThere are quite a lot of packages that have written functions for this; not all packages have functions for each metric.\nHere are the packages under consideration (if you have additions, please open an issue on Github):\n\n| Package name | Comment | Installation |\n|----|----|----|\n| data.table | Installed from the `rollingmedian` branch on Github | `devtools::install_github(\"Rdatatable/data.table\", ref = \"rollmedian\")` |\n| RcppRoll |  | `renv::install(\"RcppRoll\")` |\n| roll | Installed from Github | `devtools::install_github(\"jasonjfoster/roll\")` |\n| RollingWindow | Installed from Github | `devtools::install_github(\"andrewuhl/RollingWindow\")` |\n| runner |  | `renv::install(\"runner\")` |\n| runstats | Requires additional installation of `lib3` | `renv::install(\"runstats\")` |\n| slider |  | `renv::install(\"slider\")` |\n| zoo |  | `renv::install(\"zoo\")` |\n\n**Notes**: Because the test has to run on a normal vector *in memory*, I am not including `{polars}`. If it is possible to run rolling functions *in memory* with `{polars}`, please leave a comment below or raise an issue.\n\n# Benchmarks\n## The rules\n\nLet's start by setting up some ground rules; mostly to rear in all the potential scenarios I *could* try to cover, but also to save some computation time.\n\n-   Test on a 1.000.000 element vector\n-   Vector is right-aligned\n-   Output vector same length as input vector\n-   If `NA`s are present, return `NA`\n  - Default window width (51)\n  - (**TODO** Range of window widths to assess scaling)\n\nLet's get started! First we'll import all the packages we need. I use the `{microbenchmark}` package for the tests and `{ggplot2}` for some graphs of the results.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(ggdist)\nlibrary(microbenchmark)\n\nlibrary(slider)\nlibrary(runner)\nlibrary(zoo)\nlibrary(RollingWindow)\nlibrary(RcppRoll)\nlibrary(roll)\nlibrary(data.table)\nlibrary(runstats)\n```\n:::\n\n\n\n\n## Set variables\n\nFor the benchmark we'll make a vector of a million values, all drawn from a Gaussian distribution (doesn't really matter where there come from), but the important thing is that they are *floating numbers*, not *integers*. Initially we'll set the window width to 51 - the width needs to be an uneven number. And we set the number of times to run each test to 10.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\ndf <- tibble(x = rnorm(1000000))\nn <- 51\nn_times <- 20\nn_half <- floor(n/2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Just making the plotting function here\"}\nplot_benchmark_single <- function(microbenchmark_output){\n  microbenchmark_output <- microbenchmark_output |> \n    as_tibble() |> \n    separate_wider_delim(expr, delim = \"::\", names = c(\"package_name\", \"function_name\")) |> \n    mutate(time = time / 1000000,\n           pkg_fct = paste(package_name, function_name, sep = \" \"))\n  \n  med_time <- microbenchmark_output |> \n    group_by(pkg_fct) |> \n    summarise(time = round(median(time), 2)) |> \n    mutate(time = paste(time, \"ms\"))\n  \n  microbenchmark_output |> \n    ggplot(aes(x = fct_reorder(pkg_fct, time, .desc = TRUE), y = time, fill = pkg_fct)) +\n    # ggdist::stat_interval() +\n    # geom_boxplot(outliers = FALSE) +\n    ggdist::geom_weave(position = \"dodge\", alpha = 0.5) +\n    # geom_jitter(height = 0, width = 0.1, alpha = 0.3) +\n    geom_text(data = med_time, aes(x = pkg_fct, y = Inf, label = time), hjust = 1) +\n    scale_y_log10(breaks=trans_breaks(\"log10\", function(x) 10^x, n=4)) +\n    scale_x_discrete(labels = label_wrap(10)) +\n    annotation_logticks(sides = \"b\", colour = \"grey70\") +\n    guides(fill = \"none\") +\n    coord_flip() +\n    ylab(\"Time (ms)\") +\n    xlab(\"\") +\n    ggdist::theme_ggdist() +\n    theme(\n      panel.grid.major.x = element_line(colour = \"grey70\"),\n      panel.grid.minor.x = element_line(colour = \"grey90\")\n    )\n}\n```\n:::\n\n\n\n\n\n## Mean\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm_mean <- microbenchmark(\n  \"data.table::frollmean\" = data.table::frollmean(df$x, n, align = \"right\"),\n  \"roll::roll_mean\" = roll::roll_mean(df$x, width = n),\n  \"RollingWindow::RollingMean\" = RollingWindow::RollingMean(df$x, n),\n  \"runstats::RunningMean\" = runstats::RunningMean(df$x, W = n),\n  \"slider::slide_mean\" = slider::slide_mean(df$x, before = n-1, complete = TRUE),\n  \"RcppRoll::roll_meanr\" = RcppRoll::roll_meanr(df$x, n = n, fill = NA),\n  \"zoo::rollmeanr\" = zoo::rollmeanr(df$x, k = n, fill = NA),\n  \"runner::mean_run\" = runner::mean_run(df$x, k = n, na_pad = TRUE),\n  times = n_times)\nbm_mean |> \n  plot_benchmark_single()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## Median\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm_median <- microbenchmark(\n  \"data.table::frollmedian\" = data.table::frollmedian(df$x, n),\n  \"RcppRoll::roll_median\" = RcppRoll::roll_median(df$x, n = n, fill = NA),\n  \"roll::roll_median\" = roll::roll_median(df$x, width = n),\n  \"RollingWindow::RollingMedian\" = RollingWindow::RollingMedian(df$x, n),\n  \"zoo::rollmedianr\" = zoo::rollmedianr(df$x, k = n, fill = NA),\n  times = n_times)\nbm_median |> \n  plot_benchmark_single()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## Min\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm_min <- microbenchmark(\n  \"data.table::frollmin\" = data.table::frollmin(df$x, n),\n  \"RcppRoll::roll_min\" = RcppRoll::roll_min(df$x, n = n, fill = NA),\n  \"roll::roll_min\" = roll::roll_min(df$x, width = n),\n  \"RollingWindow::RollingMin\" = RollingWindow::RollingMin(df$x, n),\n  \"slider::slide_min\" = slider::slide_min(df$x, before = n-1, complete = TRUE),\n  \"runner::min_run\" = runner::min_run(df$x, k = n, na_pad = TRUE),\n  times = n_times)\nbm_min |> \n  plot_benchmark_single()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## Max\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm_max <- microbenchmark(\n  \"data.table::frollmax\" = data.table::frollmax(df$x, n),\n  \"RcppRoll::roll_max\" = RcppRoll::roll_max(df$x, n = n, fill = NA),\n  \"roll::roll_max\" = roll::roll_max(df$x, width = n),\n  \"RollingWindow::RollingMax\" = RollingWindow::RollingMax(df$x, n),\n  \"runner::max_run\" = runner::max_run(df$x, k = n, na_pad = TRUE),\n  \"slider::slide_max\" = slider::slide_max(df$x, before = n-1, complete = TRUE),\n  \"zoo::rollmax\" = zoo::rollmax(df$x, k = n, fill = NA),\n  times = n_times)\nbm_max |> \n  plot_benchmark_single()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n## Sum\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm_sum <- microbenchmark(\n    \"data.table::frollsum, exact\" = data.table::frollsum(df$x, n, algo = \"exact\"),\n    \"data.table::frollsum, fast\" = data.table::frollsum(df$x, n, algo = \"fast\"),\n    \"RcppRoll::roll_sum\" = RcppRoll::roll_sum(df$x, n = n, fill = NA),\n    \"roll::roll_sum\" = roll::roll_sum(df$x, width = n),\n    \"RollingWindow::RollingSum\" = RollingWindow::RollingSum(df$x, n),\n    \"runner::sum_run\" = runner::sum_run(df$x, k = n, na_pad = TRUE),\n    \"slider::slide_sum\" = slider::slide_sum(df$x, before = n-1, complete = TRUE),\n    \"zoo::rollsum\" = zoo::rollsum(df$x, n, fill = NA),\n    times = n_times)\nbm_sum |> \n  plot_benchmark_single()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n## SD\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm_sd <- microbenchmark(\n  \"RcppRoll::roll_sd\" = RcppRoll::roll_sd(df$x, n = n, fill = NA),\n  \"roll::roll_sd\" = roll::roll_sd(df$x, width = n),\n  \"RollingWindow::RollingStd\" = RollingWindow::RollingStd(df$x, n),\n  \"runstats::RunningSd\" = runstats::RunningSd(df$x, W = n),\n  times = n_times)\nbm_sd |> \n  plot_benchmark_single()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n## Custom functions\n\nThese functions are not optimised like the others, so they take a lot longer... so I'll use fewer iterations here.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm_custom <- microbenchmark(\n  \"data.table::frollapply\" = data.table::frollapply(df$x, n, sum),\n  \"zoo::rollapply\" = zoo::rollapply(df$x, n, sum),\n  times = 5)\nbm_custom |> \n  plot_benchmark_single()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n# Conclusion\nIn conclusion there's a clear overall winner: **data.table**. It's fast, flexible, it's well-maintain and it's thoroughly tested.\nHowever, there are a few cases where you might want something different. \n\n-   If you need rolling functions that *data.table* doesn't have, I would go with **roll** which covers a range of other functions.\n-   If you need weighted estimates, I would go with **roll**. \n-   If you need custom alignment (not right/left/center), I would go with **slider**.\n\nAnd if you can in any way get away with it: Do **not** use custom functions! See if it might not be better to compute the constituents from optimised functions.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}