{
  "hash": "c7bb6ef7c87ab78bf4eddc47e4e1ebdc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Benchmarking rolling functions in R\ndescription: I set out to benchmark the speed of rolling functions from R packages\ncategories: \n    - r\n    - rolling\n    - stats\nauthor:\n  - name: Mikkel Roald-Arb√∏l\n    url: https://roald-arboel.com\n    orcid: 0000-0002-9998-0058\n    affiliation: PhD Student in Neuroscience & Animal Behaviour @ University of Sussex\n    affiliation-url: https://sussex.ac.uk\ndate: 2024-10-03\nimage: \"pretty-r.png\"\nimage-alt: Two cute balls decorating the R logo.\ntoc: true\ndraft: true\ncitation: true\n# include-before-body: benchmark.html\n---\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](pretty-r.png){fig-align='center' fig-alt='A fuzzy monster in a beret and scarf, critiquing their own column graph on a canvas in front of them while other assistant monsters (also in berets) carry over boxes full of elements that can be used to customize a graph (like themes and geometric shapes). In the background is a wall with framed data visualizations. Stylized text reads \"ggplot2: build a data masterpiece.\"' width=75%}\n:::\n:::\n\n\n\n\n::: {.gray-italic .center-text}\nArt by [Allison Horst](https://allisonhorst.com/)\n:::\n\n---\n\n\nI'll write a bit about the benchmarks here.\n\nCan run on a normal vector (precludes `polars`).\n\nHere are the packages under consideration (if you have additions, please open an issue on Github):\n\n-   data.table\n-   zoo\n-   RcppRoll\n-   runner\n-   slider\n-   RollingWindow\n-   roll\n-   runstats\n-   polars\n\nWe are considering the following computations\n\n-   Mean\n-   Median\n-   Min\n-   Max\n-   Sum\n-   Product\n-   SD\n-   MAD\n-   Correlation\n-   Covariance\n-   Skew\n-   Custom functions\n\nWe also keep track of various features:\n\n- Alignment\n- NA handling\n- Weight\n\nInstall `data.table` form the `rollmedian` branch:\n\n\n\n\n\n\n\n\n\n\n-   `devtools::install_github(\"Rdatatable/data.table\", ref = \"rollmedian\")`\n\nInstall `roll` from Github:\n\n-   `devtools::install_github(\"jasonjfoster/roll\")`\n\nInstall `RollingWindow` from Github:\n\n-   `devtools::install_github(\"andrewuhl/RollingWindow\")`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(microbenchmark)\n\nlibrary(slider)\nlibrary(runner)\nlibrary(zoo)\nlibrary(RollingWindow)\nlibrary(RcppRoll)\nlibrary(roll)\nlibrary(data.table)\nlibrary(runstats)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(x = rnorm(1000000))\nn <- 51\nn_times <- 10\nn_half <- floor(n/2)\n```\n:::\n\n\n\n\n## Mean\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollmean\" = data.table::frollmean(df$x, n),\n  \"roll::roll_mean\" = roll::roll_mean(df$x, width = n),\n  \"RollingWindow::RollingMean\" = RollingWindow::RollingMean(df$x, n),\n  \"runstats::RunningMean\" = runstats::RunningMean(df$x, W = n),\n  \"slider::slide_mean\" = slider::slide_mean(df$x, before = n_half, after = n_half),\n  \"RcppRoll::roll_mean\" = RcppRoll::roll_mean(df$x, n = n, fill = NA),\n  \"zoo::rollmean\" = zoo::rollmean(df$x, k = n, fill = NA),\n  \"runner::mean_run\" = runner::mean_run(df$x, k = n, na_pad = TRUE),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                       expr         min          lq       mean      median\n      data.table::frollmean    2.241879    2.340252   11.07247    2.713214\n            roll::roll_mean   11.808366   12.351446   14.35429   12.473165\n RollingWindow::RollingMean   16.977660   17.465734   33.28365   23.602618\n      runstats::RunningMean   14.769024   16.227194   44.86687   25.787892\n         slider::slide_mean   73.969034   74.136307   76.08521   75.195895\n        RcppRoll::roll_mean  125.844943  127.134127  129.67824  129.576611\n              zoo::rollmean  256.682808  313.302683  346.79951  322.212449\n           runner::mean_run 1198.164818 1228.970005 1369.71537 1285.969585\n          uq        max neval\n    6.031607   79.03656    10\n   14.610513   24.02796    10\n   26.719363  128.51629    10\n   94.260361  108.86306    10\n   77.303700   80.14807    10\n  131.924998  135.28932    10\n  367.791690  531.82976    10\n 1547.052810 1606.93501    10\n```\n\n\n:::\n:::\n\n\n\n\n## Median\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollmedian\" = data.table::frollmedian(df$x, n),\n  \"RollingWindow::RollingMedian\" = RollingWindow::RollingMedian(df$x, n),\n  \"zoo::rollmedian\" = zoo::rollmedian(df$x, k = n, fill = NA),\n  \"roll::roll_median\" = roll::roll_median(df$x, width = n),\n  \"RcppRoll::roll_median\" = RcppRoll::roll_median(df$x, n = n, fill = NA),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                         expr        min         lq       mean     median\n      data.table::frollmedian   69.04398   71.51425   89.17143   73.78828\n RollingWindow::RollingMedian   57.11521   57.80190   65.25114   64.92265\n              zoo::rollmedian  316.62932  352.47701  356.72934  359.56134\n            roll::roll_median  501.02063  503.81910  541.68486  526.72164\n        RcppRoll::roll_median 1407.80392 1409.40807 1536.79857 1466.03330\n         uq        max neval\n   77.92332  225.23769    10\n   69.99089   77.45782    10\n  365.43327  396.97943    10\n  538.86600  665.62833    10\n 1633.18224 1909.33519    10\n```\n\n\n:::\n:::\n\n\n\n\n## Min\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollmin\" = data.table::frollmin(df$x, n),\n  \"roll::roll_min\" = roll::roll_min(df$x, width = n),\n  \"RollingWindow::RollingMin\" = RollingWindow::RollingMin(df$x, n),\n  \"RcppRoll::roll_min\" = RcppRoll::roll_min(df$x, n = n, fill = NA),\n  \"runner::min_run\" = runner::min_run(df$x, k = n, na_pad = TRUE),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                      expr        min         lq        mean      median\n      data.table::frollmin   5.411031   5.517803    5.827558    5.792026\n            roll::roll_min  22.984927  23.445202   23.864652   23.630812\n RollingWindow::RollingMin  44.843584  46.259335   52.213656   48.525513\n        RcppRoll::roll_min 349.503761 350.284608  355.950302  352.792411\n           runner::min_run 798.355932 855.048846 1050.799176 1080.054734\n          uq         max neval\n    6.037268    6.309239    10\n   24.170740   25.898749    10\n   56.849840   67.821354    10\n  359.726967  371.640967    10\n 1174.581112 1313.950563    10\n```\n\n\n:::\n:::\n\n\n\n\n## Max\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollmax\" = data.table::frollmax(df$x, n),\n  \"roll::roll_max\" = roll::roll_max(df$x, width = n),\n  \"RollingWindow::RollingMax\" = RollingWindow::RollingMax(df$x, n),\n  \"RcppRoll::roll_max\" = RcppRoll::roll_max(df$x, n = n, fill = NA),\n  \"runner::max_run\" = runner::max_run(df$x, k = n, na_pad = TRUE),\n  \"zoo::rollmax\" = zoo::rollmax(df$x, k = n, fill = NA),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                      expr         min          lq       mean      median\n      data.table::frollmax    5.044174    5.610125   17.85473    6.502458\n            roll::roll_max   22.839600   24.028406   26.71447   26.783014\n RollingWindow::RollingMax   46.142606   48.621133   57.48825   49.863125\n        RcppRoll::roll_max  350.372535  356.682585  371.96263  369.004938\n           runner::max_run  784.649671  812.671187 1032.20082  973.548273\n              zoo::rollmax 1147.328909 1241.116590 1351.98079 1347.271621\n          uq        max neval\n    9.949318  106.67906    10\n   29.236878   31.57566    10\n   52.198837  124.78942    10\n  386.567315  401.79024    10\n 1283.828536 1409.76538    10\n 1477.122353 1548.25293    10\n```\n\n\n:::\n:::\n\n\n\n\n## Sum\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n    \"data.table::frollsum, fast\" = data.table::frollsum(df$x, n, algo = \"fast\"),\n    \"roll::roll_sum\" = roll::roll_sum(df$x, width = n),\n    \"RollingWindow::RollingSum\" = RollingWindow::RollingSum(df$x, n),\n    \"slider::slide_sum\" = slider::slide_sum(df$x, before = n_half, after = n_half),\n    \"data.table::frollsum, exact\" = data.table::frollsum(df$x, n, algo = \"exact\"),\n    \"RcppRoll::roll_sum\" = RcppRoll::roll_sum(df$x, n = n, fill = NA),\n    \"zoo::rollsum\" = zoo::rollsum(df$x, n, fill = NA),\n    \"runner::sum_run\" = runner::sum_run(df$x, k = n, na_pad = TRUE),\n    times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                        expr         min          lq        mean      median\n  data.table::frollsum, fast    2.523604    2.659571    5.861422    3.063187\n              roll::roll_sum    6.436056    6.642563    9.666256    8.289517\n   RollingWindow::RollingSum   17.793522   19.836219   26.065329   20.714188\n           slider::slide_sum   76.570577   78.599420   90.508191   83.782619\n data.table::frollsum, exact   36.971424   38.606730   40.628789   39.484406\n          RcppRoll::roll_sum  126.439986  131.928438  132.967029  134.275092\n                zoo::rollsum  325.665040  379.251710  480.714105  450.228940\n             runner::sum_run 1289.769892 1418.957973 1525.079449 1517.706760\n          uq        max neval\n    4.499823   18.11897    10\n   12.717016   16.84787    10\n   33.918532   43.64378    10\n   88.895235  126.26658    10\n   40.049148   54.13022    10\n  135.329135  136.40403    10\n  608.734517  696.18947    10\n 1658.419845 1761.18214    10\n```\n\n\n:::\n:::\n\n\n\n\n## SD\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"roll::roll_sd\" = roll::roll_sd(df$x, width = n),\n  \"RollingWindow::RollingStd\" = RollingWindow::RollingStd(df$x, n),\n  \"runstats::RunningSd\" = runstats::RunningSd(df$x, W = n),\n  \"RcppRoll::roll_sd\" = RcppRoll::roll_sd(df$x, n = n, fill = NA),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n                      expr        min         lq       mean     median\n             roll::roll_sd   56.31893   56.64948   61.66736   57.28845\n RollingWindow::RollingStd   31.00776   33.04170   42.24170   33.54361\n       runstats::RunningSd   59.02132   67.17997   92.24908   85.79771\n         RcppRoll::roll_sd 1205.79275 1217.69071 1292.22611 1294.74142\n         uq        max neval\n   61.82976   79.94232    10\n   40.37113  107.05237    10\n  113.36480  163.73572    10\n 1322.65637 1440.68273    10\n```\n\n\n:::\n:::\n\n\n\n\n## Custom functions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark(\n  \"data.table::frollapply\" = data.table::frollapply(df$x, n, sum),\n  \"zoo::rollapply\" = zoo::rollapply(df$x, n, sum),\n  times = n_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: seconds\n                   expr       min        lq      mean    median        uq\n data.table::frollapply  3.682705  3.903462  4.026611  4.053144  4.202986\n         zoo::rollapply 11.452357 11.715537 12.500304 12.427262 13.319937\n       max neval\n  4.230897    10\n 14.040575    10\n```\n\n\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}