{
  "hash": "504e97c0aaf97e7f37a9b3aa5998621f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Use {renv} to manage dependencies per blog post\ndescription: When testing out packages in blog posts, it's preferable to keep dependencies for each post separately. \ncategories: \n  - r\n  - quarto\n  - blog\ndate: 2024-10-04\ndate-modified: 2024-10-04\n# image: \n# image-alt: \ndraft: false\n---\n\n\n\n\n\n\n\n\nAs I was making some benchmarks in a blog post, I needed a different version of *data.table* than the standard. However, I do want to keep the CRAN version of *data.table* available for other things, so I needed a way to maintain two separate versions.\n\nI [asked on Mastodon](https://neuromatch.social/@roaldarboel/113243708252919690) and got some good ideas. Luckily, there were some amazing suggestions! [Joel Nitta](https://www.joelnitta.com/posts/2024-01-11_using_renv_with_blog/) suggested using `renv::use()` which I did end up doing. I had to refine it a bit, as I don't want to open each post in a new project window - I wanted to simply work from my base project. But now I've got a good workflow. It relies on *renv* and the fact that it's possible to have multiple profiles in the same `renv.lock` file. So now my process is this:\n\n## 1. Install the *here* package\n\nIn your base/default profile, install the *here* package with:\n\n```{{r}}\nrenv::install(\"here\")\n```\n\n## 2. Activate new profile, install and snapshot\n\nIn a new blog post, I keep this chunk of code in the top of every new blog post. I install the packages I need and take a `snapshot()`; note that running `renv::snapshot()` without specifying the packages gave me a good headache, and this was the best solution I could find. I set `eval` to false; this is a chunk I only run manually, but keep around to remember where I got the packages from (e.g. from a certain branch or commit). \n\n```{{r}}\n#| eval: false\n#| include: false\n\n# Activate new profile\nrenv::activate(profile = \"2024-renv-blog\")\n\n# Install the needed packages\nrenv::install(\n  \"ggplot2\"\n)\n\n# Snapshot the packages\nrenv::snapshot(\n  packages = c(  \n    \"ggplot2\")\n  )\n```\n\n\n## 3. Use new profile\n\nNext, I use the new profile. I don't run this block myself, it will be picked up by `renv` when you, or `gh-pages`, render your site. I use `here::here()` You don't need to touch it from now on. Note that in all these blocks, I've set `#| include: false` so they won't be shown in the actual blog post.\n\n```{{r}}\n#| include: false\nlock_path <- paste(here::here(), \"renv/profiles/2024-renv-blog/renv.lock\", sep = \"/\")\nrenv::use(lockfile = lock_path)\n```\n\n## 4. Write awesome content\n\nFrom here, I go on to write the post. Let's try and see whether this throws an error!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(iris, aes(Sepal.Length, Sepal.Width)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n## 5. Render Website\n\nLastly, the only thing left is clicking \"Render Website\" and seeing your posts render with all their separate *renv* libraries!\n\n\n# Tips and tricks\n\nThere are a few tips and tricks that might be worth noting.\n\n## `.renvignore`\n\nFirst of all, I've placed a `.renvignore` file at the base of my project, that excludes all my blog files, so just a single line (might be `/posts/` if you use that name):\n```\n/blog/\n```\nThat simply ensures that the default environment doesn't think it's out-of-sync due to dependencies for your blog posts.\n\n## `here::here()`\nI installed the `here` package in my default env as it makes it much easier to point to the correct lock files. However, since I don't really use it in other places than in my blog posts, *renv* thinks it's unnecessary. So I've just placed a section in the `index.qmd` at the root of my project with:\n\n```{{r}}\n#| include: false\nhere::here()\n```\n\nThat keeps those out-of-sync messages at bay!\n\n## Packages from Github (and similar)\n\nHere, the `install` and `snapshot` were pretty much identical. However, if you install e.g. from Github, you need to *just* name the package in `snapshot`, like so:\n\n```{{r}}\n#| eval: false\n#| include: false\n\nrenv::activate(profile = \"2024-renv-blog\")\n\nrenv::install(\n  \"Rdatatable/data.table\"\n)\n\nrenv::snapshot(\n  packages = c(  \n    \"data.table\")\n  )\n```\n\n## Which profile am I in?\nWhen rendering the website, I forgot whether I was using the correct profile, and I also messed the default up at some point. The trick to being sure that you're in your base profile is to run `renv::deactivate()` followed by `renv::activate()`. Sure, there might be better ways - if you know them, please let me know!\n\n## Publishing\n\nInitially I attempted to publish using a Github Action, but it's tricky, and [it was pointed out to me](https://fosstodon.org/@Drmowinckels/113256144437597183) that I might not want to re-render posts every time I commit new content... that makes a lot of sense! So simply Â¶building to a `docs` folder](https://quarto.org/docs/publishing/github-pages.html#render-to-docs) and publishing from there works much better. \n\n# Conclusion\nSo there you have it - it's possible to use different `renv` profiles for different blog posts. Is it worth it? Well, to me at least, I hope it will be as I try out some niche packages!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}